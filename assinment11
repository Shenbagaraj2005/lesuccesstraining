1.merge k sorted list
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        Queue<ListNode> minHeap=  new PriorityQueue<>((a,b)->a.val-b.val);
        for(ListNode node:lists){
            if(node==null) continue;
            minHeap.add(node);
        }
        ListNode dummy= new ListNode();
        ListNode curr= dummy;
        while(!minHeap.isEmpty()){
            ListNode top= minHeap.poll();
            curr.next= top;
            curr= curr.next;
            if(top.next!=null){
                minHeap.add(top.next);
            }
        }
        return dummy.next;
    }
}


2.delete a node in linked list
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void deleteNode(ListNode node) {
        node.val= node.next.val;
        node.next=node.next.next;
    }
}


3.remove duplicates from sorted list
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode curr=  head;
        while(curr!=null && curr.next!=null){
            if(curr.val== curr.next.val){
                curr.next=curr.next.next;
            }
            else{
                curr= curr.next;
            }   
        }
        return head;
    }
}
