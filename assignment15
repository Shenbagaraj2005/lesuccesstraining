1. N-Queens Problem
import java.util.*;

public class NQueens {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        char[][] board = new char[n][n];

        for (char[] row : board)
            Arrays.fill(row, '.');

        solve(0, board, result, n);
        return result;
    }

    private void solve(int row, char[][] board, List<List<String>> result, int n) {
        if (row == n) {
            result.add(construct(board));
            return;
        }

        for (int col = 0; col < n; col++) {
            if (isSafe(board, row, col, n)) {
                board[row][col] = 'Q';
                solve(row + 1, board, result, n);
                board[row][col] = '.';  // backtrack
            }
        }
    }

    private boolean isSafe(char[][] board, int row, int col, int n) {
        for (int i = 0; i < row; i++)
            if (board[i][col] == 'Q') return false;

        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 'Q') return false;

        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++)
            if (board[i][j] == 'Q') return false;

        return true;
    }

    private List<String> construct(char[][] board) {
        List<String> res = new ArrayList<>();
        for (char[] row : board)
            res.add(new String(row));
        return res;
    }

    public static void main(String[] args) {
        NQueens nq = new NQueens();
        int n = 4;
        List<List<String>> solutions = nq.solveNQueens(n);
        for (List<String> sol : solutions) {
            for (String row : sol)
                System.out.println(row);
            System.out.println();
        }
    }
}


2. Rat in a Maze
import java.util.*;

public class RatInMaze {
    static List<String> paths = new ArrayList<>();
    static int[][] dir = {{1, 0}, {0, -1}, {0, 1}, {-1, 0}}; // D, L, R, U
    static char[] move = {'D', 'L', 'R', 'U'};

    public static void findPaths(int[][] maze, int n) {
        boolean[][] visited = new boolean[n][n];
        if (maze[0][0] == 1)
            dfs(0, 0, "", maze, visited, n);

        Collections.sort(paths);
        System.out.println(paths);
    }

    private static void dfs(int i, int j, String path, int[][] maze, boolean[][] vis, int n) {
        if (i == n - 1 && j == n - 1) {
            paths.add(path);
            return;
        }

        vis[i][j] = true;

        for (int d = 0; d < 4; d++) {
            int ni = i + dir[d][0];
            int nj = j + dir[d][1];

            if (ni >= 0 && nj >= 0 && ni < n && nj < n &&
                maze[ni][nj] == 1 && !vis[ni][nj]) {
                dfs(ni, nj, path + move[d], maze, vis, n);
            }
        }

        vis[i][j] = false; // backtrack
    }

    public static void main(String[] args) {
        int[][] maze = {
            {1, 0, 0, 0},
            {1, 1, 0, 1},
            {0, 1, 0, 0},
            {1, 1, 1, 1}
        };
        findPaths(maze, 4);
    }
}


3. Letter Combinations of a Phone Number
import java.util.*;

public class PhoneCombinations {
    static String[] map = {
        "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"
    };

    public static List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        if (digits.length() == 0) return result;

        backtrack("", digits, 0, result);
        return result;
    }

    private static void backtrack(String current, String digits, int index, List<String> result) {
        if (index == digits.length()) {
            result.add(current);
            return;
        }

        String letters = map[digits.charAt(index) - '0'];
        for (char c : letters.toCharArray()) {
            backtrack(current + c, digits, index + 1, result);
        }
    }

    public static void main(String[] args) {
        String digits = "23";
        List<String> output = letterCombinations(digits);
        System.out.println(output);
    }
}
